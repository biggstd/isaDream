'''A data model class for IDREAM Drupal Content Nodes.

This module provides the needed utilities to convert an json file to a pandas
dataframe for use in a Bokeh visualization application.

Attributes:
    BASE_PATH (str): The base-path that will be prepended to the filenames
        specified in the .json metadata.

'''

# Generic Python imports.
import os
import json
# import itertools
# import collections

# Data science imports.
import pandas as pd

# Local helper function imports.
from . import utils

# Local model class imports.
from .sample import Sample
from .factor import Factor
from .assay import Assay
from .comment import Comment


class DrupalNode:
    '''The Study model generated for a single Drupal Node.

    Each Drupal content node for a given experiment is modeled under the same
    `.json` structure.

    There are sub-groups to this structure:
        1. **Node information**: Information concerning the Drupal Node, and
           the overall experiment description and title.
        2. **Study Factors**: Experimental data that applies to all the data
           contained by this node.
        3. **Node Samples**: Experimental materials that apply to all data
           contained within this node.
        4. **Assays**: Individual datafiles and their associated factors.
        5. **Commments**: Commments that apply to this entire Node.

    The atomic units of this model are:
        + **Factors**: Any quantitative or qualitative value. There are several
          subtypes of Factors. They are named differently only for the purposes
          of working with Drupal fields (and perhaps clarity.) Their names are
          based on their location in the `json` structure.
            + studyFactors
            + studySampleFactors
            + materialCharacteristic
            + studySampleFactors
            + AssaySampleFactors
          Out of five possible fields the user must supply three of them, one
          must be the `factorType`, another must be a `unitRef` the other must
          be a value. Either a decimal, string or reference.
          + A very special type of **Factor** is the `csvColumnIndex`
        + **Species**: The visual Bokeh models are based on a 'species'
          interpretation. That is the way in which we can theoretically
          compare values accross experiements. Each Species entry must have:
            + speciesReference: A string reference of the species.
            + stoichiometry: A decimal value representing this species
              relative ratio as compared to a samples Factors. This value may be
              used by visualizations that are concentration based.

    # TODO: Discuss comments and other parts of the json file.
            Expand on csvColumnIndex.

    **Outline of Dataflow**:

    Drupal Entry -> SQL Database -> PHP Drupal Module -> .json file ->
    isaDream DrupalNode -> idream Assays -> Bokeh Applicaitons


    '''

    def __init__(self, node_json_path):

        self.json_path = os.path.join(utils.BASE_PATH, node_json_path)

        # Load the json file into memory.
        with open(self.json_path) as json_file:
            self.json_dict = json.load(json_file)

        # The higher tiers of metadata apply to all data (and Assay instances
        # generated by this instance.) within this class. These are the
        # highest-level, selectable, dictionary keys we can use to begin
        # to break up the json file.
        self._node_information = self.normalize_to_dataframe('nodeInformation')
        self._study_factors = self.normalize_to_dataframe('studyFactors')
        self._study_samples = self.normalize_to_dataframe('studySamples')
        self._study_comments = self.normalize_to_dataframe('comments')

        # The data to be used to construct Assay instances.
        self._study_assays = self.normalize_to_dataframe('assays')

    def normalize_to_dataframe(self, key):
        '''Reads a nested dictionary and returns a normalized pandas
        dataframe.

        '''
        # Normalize the dataframe to a list of dictionaries.
        normalized_dict = list(utils.normalize(self.json_dict.get(key)))
        # Read the data into a pandas DataFrame.
        normalized_df = pd.io.json.json_normalize(normalized_dict)
        return normalized_df

    @property
    def assays(self):
        '''Contains a list of assay dataframes associated with this instance.

        '''
        assays = self._study_assays.groupby(level=0)
        assay_data = [data for _, data in assays]
        return [Assay(data, self.samples, self.factors, self.comments)
                for data in assay_data]

    @property
    def factors(self):
        '''
        '''
        factors = self._study_factors.to_dict('records')
        return [Factor(data) for data in factors]

    @property
    def _sample_groups(self):
        '''
        '''
        _sample_groups = self._study_samples.copy()
        _sample_groups = _sample_groups.set_index('sampleName').T
        _sample_groups = utils.split_index(_sample_groups, 'index').T
        _sample_groups.columns = pd.MultiIndex.from_tuples(_sample_groups.columns)
        _sample_groups = _sample_groups.groupby(level=0)
        _sample_groups = [data for _, data in _sample_groups]

        return _sample_groups

    @property
    def samples(self):
        sample_records = [data for data in self._sample_groups]
        return [Sample(data.T) for data in sample_records]

    @property
    def comments(self):
        '''
        '''
        comments = self._study_comments.to_dict('records')
        return [Comment(data) for _, data in comments]

    def __str__(self):
        return f'Node: {self._node_information}'
